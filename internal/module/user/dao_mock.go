// Code generated by MockGen. DO NOT EDIT.
// Source: dao.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/yearnfar/memos/internal/module/user/model"
)

// MockDAO is a mock of DAO interface.
type MockDAO struct {
	ctrl     *gomock.Controller
	recorder *MockDAOMockRecorder
}

// MockDAOMockRecorder is the mock recorder for MockDAO.
type MockDAOMockRecorder struct {
	mock *MockDAO
}

// NewMockDAO creates a new mock instance.
func NewMockDAO(ctrl *gomock.Controller) *MockDAO {
	mock := &MockDAO{ctrl: ctrl}
	mock.recorder = &MockDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDAO) EXPECT() *MockDAOMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockDAO) CreateUser(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDAOMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDAO)(nil).CreateUser), ctx, user)
}

// DeleteUserById mocks base method.
func (m *MockDAO) DeleteUserById(ctx context.Context, userId int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserById", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserById indicates an expected call of DeleteUserById.
func (mr *MockDAOMockRecorder) DeleteUserById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserById", reflect.TypeOf((*MockDAO)(nil).DeleteUserById), ctx, userId)
}

// FindUser mocks base method.
func (m *MockDAO) FindUser(ctx context.Context, where []string, args []any, fields ...string) (*model.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, where, args}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindUser", varargs...)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockDAOMockRecorder) FindUser(ctx, where, args interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, where, args}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockDAO)(nil).FindUser), varargs...)
}

// FindUserAccessTokens mocks base method.
func (m *MockDAO) FindUserAccessTokens(ctx context.Context, userId int32) ([]*model.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserAccessTokens", ctx, userId)
	ret0, _ := ret[0].([]*model.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserAccessTokens indicates an expected call of FindUserAccessTokens.
func (mr *MockDAOMockRecorder) FindUserAccessTokens(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserAccessTokens", reflect.TypeOf((*MockDAO)(nil).FindUserAccessTokens), ctx, userId)
}

// FindUserById mocks base method.
func (m *MockDAO) FindUserById(ctx context.Context, id int32) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockDAOMockRecorder) FindUserById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockDAO)(nil).FindUserById), ctx, id)
}

// FindUserByUsername mocks base method.
func (m *MockDAO) FindUserByUsername(ctx context.Context, username string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUsername", ctx, username)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByUsername indicates an expected call of FindUserByUsername.
func (mr *MockDAOMockRecorder) FindUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUsername", reflect.TypeOf((*MockDAO)(nil).FindUserByUsername), ctx, username)
}

// FindUserSettings mocks base method.
func (m *MockDAO) FindUserSettings(ctx context.Context, where []string, args []any, fields ...string) ([]*model.UserSetting, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, where, args}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindUserSettings", varargs...)
	ret0, _ := ret[0].([]*model.UserSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserSettings indicates an expected call of FindUserSettings.
func (mr *MockDAOMockRecorder) FindUserSettings(ctx, where, args interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, where, args}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserSettings", reflect.TypeOf((*MockDAO)(nil).FindUserSettings), varargs...)
}

// FindUsers mocks base method.
func (m *MockDAO) FindUsers(ctx context.Context, where []string, args []any, fields ...string) ([]*model.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, where, args}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindUsers", varargs...)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsers indicates an expected call of FindUsers.
func (mr *MockDAOMockRecorder) FindUsers(ctx, where, args interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, where, args}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsers", reflect.TypeOf((*MockDAO)(nil).FindUsers), varargs...)
}

// UpdateUser mocks base method.
func (m *MockDAO) UpdateUser(ctx context.Context, user *model.User, update map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDAOMockRecorder) UpdateUser(ctx, user, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDAO)(nil).UpdateUser), ctx, user, update)
}

// UpsertUserSetting mocks base method.
func (m_2 *MockDAO) UpsertUserSetting(ctx context.Context, m *model.UserSetting) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpsertUserSetting", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUserSetting indicates an expected call of UpsertUserSetting.
func (mr *MockDAOMockRecorder) UpsertUserSetting(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUserSetting", reflect.TypeOf((*MockDAO)(nil).UpsertUserSetting), ctx, m)
}
