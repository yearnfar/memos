// Code generated by MockGen. DO NOT EDIT.
// Source: dao.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/yearnfar/memos/internal/module/user/model"
)

// MockDAO is a mock of DAO interface.
type MockDAO struct {
	ctrl     *gomock.Controller
	recorder *MockDAOMockRecorder
}

// MockDAOMockRecorder is the mock recorder for MockDAO.
type MockDAOMockRecorder struct {
	mock *MockDAO
}

// NewMockDAO creates a new mock instance.
func NewMockDAO(ctrl *gomock.Controller) *MockDAO {
	mock := &MockDAO{ctrl: ctrl}
	mock.recorder = &MockDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDAO) EXPECT() *MockDAOMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockDAO) CreateUser(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDAOMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDAO)(nil).CreateUser), ctx, user)
}

// GetUser mocks base method.
func (m *MockDAO) GetUser(ctx context.Context, req *model.GetUserRequest) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, req)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDAOMockRecorder) GetUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDAO)(nil).GetUser), ctx, req)
}

// GetUserAccessTokens mocks base method.
func (m *MockDAO) GetUserAccessTokens(ctx context.Context, userId int) ([]*model.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccessTokens", ctx, userId)
	ret0, _ := ret[0].([]*model.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccessTokens indicates an expected call of GetUserAccessTokens.
func (mr *MockDAOMockRecorder) GetUserAccessTokens(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccessTokens", reflect.TypeOf((*MockDAO)(nil).GetUserAccessTokens), ctx, userId)
}

// GetUserById mocks base method.
func (m *MockDAO) GetUserById(ctx context.Context, id int) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockDAOMockRecorder) GetUserById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockDAO)(nil).GetUserById), ctx, id)
}

// GetUserByUsername mocks base method.
func (m *MockDAO) GetUserByUsername(ctx context.Context, username string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockDAOMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockDAO)(nil).GetUserByUsername), ctx, username)
}

// ListUsers mocks base method.
func (m *MockDAO) ListUsers(ctx context.Context, req *model.ListUsersRequest) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", ctx, req)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockDAOMockRecorder) ListUsers(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockDAO)(nil).ListUsers), ctx, req)
}

// UpdateUser mocks base method.
func (m *MockDAO) UpdateUser(ctx context.Context, user *model.User, update map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDAOMockRecorder) UpdateUser(ctx, user, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDAO)(nil).UpdateUser), ctx, user, update)
}

// UpsertUserSetting mocks base method.
func (m_2 *MockDAO) UpsertUserSetting(ctx context.Context, m *model.UserSetting) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpsertUserSetting", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUserSetting indicates an expected call of UpsertUserSetting.
func (mr *MockDAOMockRecorder) UpsertUserSetting(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUserSetting", reflect.TypeOf((*MockDAO)(nil).UpsertUserSetting), ctx, m)
}
